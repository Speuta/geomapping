{"version":3,"file":"geomapping.min.js","sources":["../src/geomapping.js"],"sourcesContent":["'use strict';\r\n\r\nexport default class GeoMapping {\r\n    static PIXELS_OFFSET = 268435456;\r\n    static PIXELS_RADIUS = 85445659.4471; /* PIXELS_OFFSET / pi() */\r\n\r\n    static EVENTS = {\r\n        READY: 'ready',\r\n        ADD: 'add',\r\n        REMOVE: 'remove',\r\n        UPDATE_POSITION: 'update_position',\r\n        STOP_POSITION: 'stop_position'\r\n    };\r\n    _events = {};\r\n    _eventsOnce = [];\r\n\r\n    _bbox = undefined;\r\n    _points = [];\r\n    _img = undefined;\r\n    _watchPositionId = undefined;\r\n\r\n    constructor(_config) {\r\n        this._config = _config;\r\n        if(!this._config.boundingBox){\r\n            console.error(`GeoMapping :: boundingBox is mandatory.`);\r\n            return;\r\n        }\r\n        if(typeof this._config.testOutOfImage !== 'boolean'){\r\n            this._config.testOutOfImage = false;\r\n        }\r\n        this._init();\r\n        return this;\r\n    }\r\n\r\n\r\n    _init() {\r\n        this._generateEvents();\r\n        let _initBboxAndPoints = () => {\r\n            this._bbox = this._getStaticMapBoundingBoxFromTwoPoints(\r\n                this._config.boundingBox[0],\r\n                this._config.boundingBox[1]\r\n            );\r\n            if(this._config.points && this._config.points.length > 0){\r\n                this._config.points.forEach((_pt) => {\r\n                    this._addPoint(_pt.lat, _pt.lng, _pt.id, _pt.data);\r\n                });\r\n            }\r\n            this.trigger(GeoMapping.EVENTS.READY);\r\n        };\r\n        if(typeof this._config.imgSrc === 'string'){\r\n            this._preloadImg(this._config.imgSrc, (img) => {\r\n                this._img = img;\r\n                _initBboxAndPoints();\r\n            }, (err) => {\r\n                console.error(`GeoMapping :: error on preloading ${this._config.imgSrc}`, err);\r\n            });\r\n        } else if(this._config.imgSrc) {\r\n            this._img = this._config.imgSrc;\r\n            _initBboxAndPoints();\r\n        } else {\r\n            _initBboxAndPoints();\r\n        }\r\n    };\r\n\r\n    _generateEvents = () => {\r\n        Object.keys(GeoMapping.EVENTS).forEach((_key) => {\r\n            this._events[GeoMapping.EVENTS[_key]] = [];\r\n        });\r\n    };\r\n\r\n    _preloadImg(src, success, error){\r\n        let image = new Image();\r\n        image.onload = () => {\r\n            if(typeof success === 'function'){\r\n                success(image);\r\n            }\r\n        };\r\n        image.onerror = (err) => {\r\n            if(typeof error === 'function'){\r\n                error(err);\r\n            }\r\n        };\r\n        image.src = src;\r\n    };\r\n\r\n    _lngToX(lng) {\r\n        return Math.round(GeoMapping.PIXELS_OFFSET + GeoMapping.PIXELS_RADIUS * lng * Math.PI / 180);\r\n    };\r\n\r\n    _latToY(lat) {\r\n        return Math.round(GeoMapping.PIXELS_OFFSET - GeoMapping.PIXELS_RADIUS *\r\n            Math.log((1 + Math.sin(lat * Math.PI / 180)) /\r\n                (1 - Math.sin(lat * Math.PI / 180))) / 2);\r\n    };\r\n\r\n    _XToLon(x) {\r\n        return ((Math.round(x) - GeoMapping.PIXELS_OFFSET) / GeoMapping.PIXELS_RADIUS) * 180 / Math.PI;\r\n    };\r\n\r\n    _YToLat(y) {\r\n        return (Math.PI / 2 - 2 * Math.atan(Math.exp((Math.round(y) - GeoMapping.PIXELS_OFFSET) / GeoMapping.PIXELS_RADIUS))) * 180 / Math.PI;\r\n    };\r\n\r\n    _getStaticMapBoundingBoxFromTwoPoints(point1, point2) {\r\n        // Coordinates of the inner bounding box containing the two points\r\n        let box = {\r\n            tl: undefined,\r\n            br: undefined,\r\n            width: undefined,\r\n            height: undefined\r\n        };\r\n        let map = {\r\n            v_scale: undefined,\r\n            h_scale: undefined,\r\n            topLeft: undefined,\r\n            bottomRight: undefined\r\n        };\r\n\r\n        // Top left, with lat/longitude as pixel coordinates on full-size Mercator projection\r\n        box.tl = {\r\n            lat: this._latToY(Math.max(point1.lat, point2.lat)),\r\n            lng: this._lngToX(Math.min(point1.lng, point2.lng)),\r\n            x: Math.min(point1.x, point2.x),\r\n            y: Math.min(point1.y, point2.y)\r\n        };\r\n\r\n        // Bottom right, with lat/longitude as pixel coordinates on full-size Mercator projection\r\n        box.br = {\r\n            lat: this._latToY(Math.min(point1.lat, point2.lat)),\r\n            lng: this._lngToX(Math.max(point1.lng, point2.lng)),\r\n            x: Math.max(point1.x, point2.x),\r\n            y: Math.max(point1.y, point2.y)\r\n        };\r\n\r\n        // Box width and height\r\n        box.width = box.br.x - box.tl.x;\r\n        box.height = box.br.y - box.tl.y;\r\n\r\n        // Horizontal and vertical distance in pixels on full-size projection\r\n        let v_delta = box.br.lat - box.tl.lat;\r\n        let h_delta = box.br.lng - box.tl.lng;\r\n\r\n        // Get scale from the distance applied to map size\r\n        map.v_scale = v_delta / box.height;\r\n        map.h_scale = h_delta / box.width;\r\n\r\n        // Get map top left\r\n        map.topLeft = {\r\n            x: box.tl.lng - (box.tl.x * map.h_scale),\r\n            y: box.tl.lat - (box.tl.y * map.v_scale)\r\n        };\r\n\r\n        map.topLeft.lat = this._YToLat(map.topLeft.y);\r\n        map.topLeft.lng = this._XToLon(map.topLeft.x);\r\n\r\n        map.bottomRight = {\r\n            x: box.br.lng + ((box.width - box.br.x) * map.h_scale),\r\n            y: box.br.lat + ((box.height - box.br.y) * map.v_scale)\r\n        };\r\n        map.bottomRight.lat = this._YToLat(map.bottomRight.y);\r\n        map.bottomRight.lng = this._XToLon(map.bottomRight.x);\r\n\r\n        return map;\r\n    };\r\n\r\n    _getPointXYOnStaticMap(lat, lng, map) {\r\n        return {\r\n            lat: lat,\r\n            lng: lng,\r\n            x: (this._lngToX(lng) - map.topLeft.x) / map.h_scale,\r\n            y: (this._latToY(lat) - map.topLeft.y) / map.v_scale\r\n        };\r\n    };\r\n\r\n    _getPointLatLongOnStaticMap(x, y, map) {\r\n        return {\r\n            lat: this._YToLat(map.topLeft.y + (y * map.v_scale)),\r\n            lng: this._XToLon(map.topLeft.x + (x * map.h_scale))\r\n        };\r\n    };\r\n\r\n    _addPoint(lat, lng, id, data) {\r\n        let _point = this._getPointXYOnStaticMap(lat, lng, this._bbox);\r\n        _point.id = id;\r\n        _point.data = data;\r\n        _point.isOutOfMap = this._isOutOfImage(_point.x, _point.y);\r\n        this._points.push(_point);\r\n        return _point;\r\n    };\r\n\r\n    _isOutOfImage(x, y) {\r\n        if(this._img){\r\n            return !((x >= 0) && (x <= this._img.width) && (y >= 0) && (y <= this._img.height));\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    getPoints() {\r\n        return this._points;\r\n    };\r\n\r\n    getPointById(id) {\r\n        return this._points.find((_p) => {\r\n            return _p.id === id;\r\n        });\r\n    };\r\n\r\n    filterPointsByData(key, value) {\r\n        return this._points.filter((_p) => {\r\n            return (_p.data) && (_p.data[key]) && (_p.data[key] == value);\r\n        });\r\n    };\r\n\r\n    addPoint(lat, lng, id, data) {\r\n        let point = this._addPoint(lat, lng, id, data);\r\n        this.trigger(GeoMapping.EVENTS.ADD, point);\r\n        return point;\r\n    };\r\n\r\n    removePoint(pointId){\r\n        this._points.forEach((_pt, _index) => {\r\n            if(_pt.id === pointId){\r\n                this._points.splice(_index, 1);\r\n                this.trigger(GeoMapping.EVENTS.REMOVE, _pt);\r\n            }\r\n        });\r\n    };\r\n\r\n    getLatLngOnMap(x, y) {\r\n        if((this._config.testOutOfImage) && (this._isOutOfImage(x, y))){\r\n            console.error(`GeoMapping :: this point is out of map.`);\r\n            return;\r\n        }\r\n        return this._getPointLatLongOnStaticMap(x, y, this._bbox);\r\n    };\r\n\r\n    getPointXYOnMap(lat, lng) {\r\n        return this._getPointXYOnStaticMap(lat, lng, this._bbox);\r\n    };\r\n\r\n    trackPosition(_error){\r\n        if ((!window.navigator) || (!window.navigator.geolocation)) {\r\n            console.error(`GeoMapping :: error on trackPosition :: geolocation unavailable`);\r\n            if(typeof _error === 'function'){\r\n                _error(`GeoMapping :: error on trackPosition :: geolocation unavailable`);\r\n            }\r\n            return;\r\n        }\r\n        if(!this._watchPositionId){\r\n            this._watchPositionId = navigator.geolocation.watchPosition((_pos) => {\r\n                this.trigger(GeoMapping.EVENTS.UPDATE_POSITION,\r\n                    this._getPointXYOnStaticMap(_pos.coords.latitude, _pos.coords.longitude, this._bbox)\r\n                );\r\n            }, (err) => {\r\n                console.error(`GeoMapping :: error on trackPosition`, err);\r\n                if(typeof _error === 'function'){\r\n                    _error(`GeoMapping :: error on trackPosition`, err);\r\n                }\r\n            });\r\n        } else {\r\n            console.warn(`GeoMapping :: already tracking position`);\r\n        }\r\n    };\r\n\r\n    stopTrackPosition(){\r\n        if(this._watchPositionId){\r\n            navigator.geolocation.clearWatch(this._watchPositionId);\r\n            this._watchPositionId = undefined;\r\n            this.trigger(GeoMapping.EVENTS.STOP_POSITION);\r\n        } else {\r\n            console.warn(`GeoMapping :: tracking position is not activated`);\r\n        }\r\n    };\r\n\r\n\r\n    /** EVENTS **/\r\n    on = (eventName, handler) => {\r\n        if(this._events[eventName]){\r\n            this._events[eventName].push(handler);\r\n        }\r\n    };\r\n\r\n    one = (eventName, handler) => {\r\n        if(this._events[eventName]){\r\n            this._events[eventName].push(handler);\r\n            this._eventsOnce.push(handler);\r\n        }\r\n    };\r\n\r\n    off = (eventName, handler) => {\r\n        if(this._events[eventName] && (this._events[eventName].indexOf(handler) !== -1)){\r\n            this._events[eventName].splice(this._events[eventName].indexOf(handler), 1);\r\n        }\r\n        if(this._eventsOnce.indexOf(handler) !== -1){\r\n            this._eventsOnce.splice(this._eventsOnce.indexOf(handler), 1);\r\n        }\r\n    };\r\n\r\n    trigger = (eventName, data) => {\r\n        if(this._events[eventName]){\r\n            this._events[eventName].forEach((_handler, _index) => {\r\n                _handler(data);\r\n                if(this._eventsOnce.indexOf(_handler) !== -1){\r\n                    this._events[eventName].splice(_index, 1);\r\n                    this._eventsOnce.splice(this._eventsOnce.indexOf(_handler), 1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n};\r\n"],"names":["GeoMapping","[object Object]","READY","ADD","REMOVE","UPDATE_POSITION","STOP_POSITION","undefined","_config","this","boundingBox","testOutOfImage","_init","console","error","_generateEvents","_initBboxAndPoints","_bbox","_getStaticMapBoundingBoxFromTwoPoints","points","length","forEach","_pt","_addPoint","lat","lng","id","data","trigger","EVENTS","imgSrc","_preloadImg","img","_img","err","Object","keys","_key","_events","src","success","image","Image","onload","onerror","Math","round","PIXELS_OFFSET","PIXELS_RADIUS","PI","log","sin","x","y","atan","exp","point1","point2","box","tl","br","width","height","map","v_scale","h_scale","topLeft","bottomRight","_latToY","max","_lngToX","min","v_delta","h_delta","_YToLat","_XToLon","_point","_getPointXYOnStaticMap","isOutOfMap","_isOutOfImage","_points","push","find","_p","key","value","filter","point","pointId","_index","splice","_getPointLatLongOnStaticMap","_error","window","navigator","geolocation","_watchPositionId","warn","watchPosition","_pos","coords","latitude","longitude","clearWatch","eventName","handler","_eventsOnce","indexOf","_handler"],"mappings":"4QAEe,MAAMA,EACjBC,qBAAuB,UACvBA,qBAAuB,cAEvBA,cAAgB,CACZC,MAAO,QACPC,IAAK,MACLC,OAAQ,SACRC,gBAAiB,kBACjBC,cAAe,iBAEnBL,QAAU,GACVA,YAAc,GAEdA,WAAQM,EACRN,QAAU,GACVA,UAAOM,EACPN,sBAAmBM,EAEnBN,YAAYO,GAER,GADAC,KAAKD,QAAUA,EACXC,KAAKD,QAAQE,YAQjB,MAJ0C,kBAAhCD,KAAKD,QAAQG,iBACnBF,KAAKD,QAAQG,gBAAiB,GAElCF,KAAKG,QACEH,KAPHI,QAAQC,MAAM,2CAWtBb,QACIQ,KAAKM,kBACL,IAAIC,EAAqB,KACrBP,KAAKQ,MAAQR,KAAKS,sCACdT,KAAKD,QAAQE,YAAY,GACzBD,KAAKD,QAAQE,YAAY,IAE1BD,KAAKD,QAAQW,QAAUV,KAAKD,QAAQW,OAAOC,OAAS,GACnDX,KAAKD,QAAQW,OAAOE,SAASC,IACzBb,KAAKc,UAAUD,EAAIE,IAAKF,EAAIG,IAAKH,EAAII,GAAIJ,EAAIK,SAGrDlB,KAAKmB,QAAQ5B,EAAW6B,OAAO3B,QAED,iBAAxBO,KAAKD,QAAQsB,OACnBrB,KAAKsB,YAAYtB,KAAKD,QAAQsB,QAASE,IACnCvB,KAAKwB,KAAOD,EACZhB,OACAkB,IACArB,QAAQC,MAAM,qCAAqCL,KAAKD,QAAQsB,OAAUI,MAExEzB,KAAKD,QAAQsB,QACnBrB,KAAKwB,KAAOxB,KAAKD,QAAQsB,OACzBd,KAEAA,IAIRf,gBAAkB,KACdkC,OAAOC,KAAKpC,EAAW6B,QAAQR,SAASgB,IACpC5B,KAAK6B,QAAQtC,EAAW6B,OAAOQ,IAAS,OAIhDpC,YAAYsC,EAAKC,EAAS1B,GACtB,IAAI2B,EAAQ,IAAIC,MAChBD,EAAME,OAAS,KACW,mBAAZH,GACNA,EAAQC,IAGhBA,EAAMG,QAAWV,IACO,mBAAVpB,GACNA,EAAMoB,IAGdO,EAAMF,IAAMA,EAGhBtC,QAAQwB,GACJ,OAAOoB,KAAKC,MAAM9C,EAAW+C,cAAgB/C,EAAWgD,cAAgBvB,EAAMoB,KAAKI,GAAK,KAG5FhD,QAAQuB,GACJ,OAAOqB,KAAKC,MAAM9C,EAAW+C,cAAgB/C,EAAWgD,cACpDH,KAAKK,KAAK,EAAIL,KAAKM,IAAI3B,EAAMqB,KAAKI,GAAK,OAClC,EAAIJ,KAAKM,IAAI3B,EAAMqB,KAAKI,GAAK,OAAS,GAGnDhD,QAAQmD,GACJ,OAASP,KAAKC,MAAMM,GAAKpD,EAAW+C,eAAiB/C,EAAWgD,cAAiB,IAAMH,KAAKI,GAGhGhD,QAAQoD,GACJ,OAAwH,KAAhHR,KAAKI,GAAK,EAAI,EAAIJ,KAAKS,KAAKT,KAAKU,KAAKV,KAAKC,MAAMO,GAAKrD,EAAW+C,eAAiB/C,EAAWgD,iBAAyBH,KAAKI,GAGvIhD,sCAAsCuD,EAAQC,GAE1C,IAAIC,EAAM,CACNC,QAAIpD,EACJqD,QAAIrD,EACJsD,WAAOtD,EACPuD,YAAQvD,GAERwD,EAAM,CACNC,aAASzD,EACT0D,aAAS1D,EACT2D,aAAS3D,EACT4D,iBAAa5D,GAIjBmD,EAAIC,GAAK,CACLnC,IAAKf,KAAK2D,QAAQvB,KAAKwB,IAAIb,EAAOhC,IAAKiC,EAAOjC,MAC9CC,IAAKhB,KAAK6D,QAAQzB,KAAK0B,IAAIf,EAAO/B,IAAKgC,EAAOhC,MAC9C2B,EAAGP,KAAK0B,IAAIf,EAAOJ,EAAGK,EAAOL,GAC7BC,EAAGR,KAAK0B,IAAIf,EAAOH,EAAGI,EAAOJ,IAIjCK,EAAIE,GAAK,CACLpC,IAAKf,KAAK2D,QAAQvB,KAAK0B,IAAIf,EAAOhC,IAAKiC,EAAOjC,MAC9CC,IAAKhB,KAAK6D,QAAQzB,KAAKwB,IAAIb,EAAO/B,IAAKgC,EAAOhC,MAC9C2B,EAAGP,KAAKwB,IAAIb,EAAOJ,EAAGK,EAAOL,GAC7BC,EAAGR,KAAKwB,IAAIb,EAAOH,EAAGI,EAAOJ,IAIjCK,EAAIG,MAAQH,EAAIE,GAAGR,EAAIM,EAAIC,GAAGP,EAC9BM,EAAII,OAASJ,EAAIE,GAAGP,EAAIK,EAAIC,GAAGN,EAG/B,IAAImB,EAAUd,EAAIE,GAAGpC,IAAMkC,EAAIC,GAAGnC,IAC9BiD,EAAUf,EAAIE,GAAGnC,IAAMiC,EAAIC,GAAGlC,IAsBlC,OAnBAsC,EAAIC,QAAUQ,EAAUd,EAAII,OAC5BC,EAAIE,QAAUQ,EAAUf,EAAIG,MAG5BE,EAAIG,QAAU,CACVd,EAAGM,EAAIC,GAAGlC,IAAOiC,EAAIC,GAAGP,EAAIW,EAAIE,QAChCZ,EAAGK,EAAIC,GAAGnC,IAAOkC,EAAIC,GAAGN,EAAIU,EAAIC,SAGpCD,EAAIG,QAAQ1C,IAAMf,KAAKiE,QAAQX,EAAIG,QAAQb,GAC3CU,EAAIG,QAAQzC,IAAMhB,KAAKkE,QAAQZ,EAAIG,QAAQd,GAE3CW,EAAII,YAAc,CACdf,EAAGM,EAAIE,GAAGnC,KAAQiC,EAAIG,MAAQH,EAAIE,GAAGR,GAAKW,EAAIE,QAC9CZ,EAAGK,EAAIE,GAAGpC,KAAQkC,EAAII,OAASJ,EAAIE,GAAGP,GAAKU,EAAIC,SAEnDD,EAAII,YAAY3C,IAAMf,KAAKiE,QAAQX,EAAII,YAAYd,GACnDU,EAAII,YAAY1C,IAAMhB,KAAKkE,QAAQZ,EAAII,YAAYf,GAE5CW,EAGX9D,uBAAuBuB,EAAKC,EAAKsC,GAC7B,MAAO,CACHvC,IAAKA,EACLC,IAAKA,EACL2B,GAAI3C,KAAK6D,QAAQ7C,GAAOsC,EAAIG,QAAQd,GAAKW,EAAIE,QAC7CZ,GAAI5C,KAAK2D,QAAQ5C,GAAOuC,EAAIG,QAAQb,GAAKU,EAAIC,SAIrD/D,4BAA4BmD,EAAGC,EAAGU,GAC9B,MAAO,CACHvC,IAAKf,KAAKiE,QAAQX,EAAIG,QAAQb,EAAKA,EAAIU,EAAIC,SAC3CvC,IAAKhB,KAAKkE,QAAQZ,EAAIG,QAAQd,EAAKA,EAAIW,EAAIE,UAInDhE,UAAUuB,EAAKC,EAAKC,EAAIC,GACpB,IAAIiD,EAASnE,KAAKoE,uBAAuBrD,EAAKC,EAAKhB,KAAKQ,OAKxD,OAJA2D,EAAOlD,GAAKA,EACZkD,EAAOjD,KAAOA,EACdiD,EAAOE,WAAarE,KAAKsE,cAAcH,EAAOxB,EAAGwB,EAAOvB,GACxD5C,KAAKuE,QAAQC,KAAKL,GACXA,EAGX3E,cAAcmD,EAAGC,GACb,QAAG5C,KAAKwB,QACMmB,GAAK,GAAOA,GAAK3C,KAAKwB,KAAK4B,OAAWR,GAAK,GAAOA,GAAK5C,KAAKwB,KAAK6B,QAMnF7D,YACI,OAAOQ,KAAKuE,QAGhB/E,aAAayB,GACT,OAAOjB,KAAKuE,QAAQE,MAAMC,GACfA,EAAGzD,KAAOA,IAIzBzB,mBAAmBmF,EAAKC,GACpB,OAAO5E,KAAKuE,QAAQM,QAAQH,GAChBA,EAAO,MAAMA,EAAGxD,KAAKyD,IAAUD,EAAGxD,KAAKyD,IAAQC,IAI/DpF,SAASuB,EAAKC,EAAKC,EAAIC,GACnB,IAAI4D,EAAQ9E,KAAKc,UAAUC,EAAKC,EAAKC,EAAIC,GAEzC,OADAlB,KAAKmB,QAAQ5B,EAAW6B,OAAO1B,IAAKoF,GAC7BA,EAGXtF,YAAYuF,GACR/E,KAAKuE,QAAQ3D,SAAQ,CAACC,EAAKmE,KACpBnE,EAAII,KAAO8D,IACV/E,KAAKuE,QAAQU,OAAOD,EAAQ,GAC5BhF,KAAKmB,QAAQ5B,EAAW6B,OAAOzB,OAAQkB,OAKnDrB,eAAemD,EAAGC,GACd,IAAI5C,KAAKD,QAAsB,iBAAMC,KAAKsE,cAAc3B,EAAGC,GAI3D,OAAO5C,KAAKkF,4BAA4BvC,EAAGC,EAAG5C,KAAKQ,OAH/CJ,QAAQC,MAAM,2CAMtBb,gBAAgBuB,EAAKC,GACjB,OAAOhB,KAAKoE,uBAAuBrD,EAAKC,EAAKhB,KAAKQ,OAGtDhB,cAAc2F,GACV,IAAMC,OAAOC,YAAgBD,OAAOC,UAAUC,YAK1C,OAJAlF,QAAQC,MAAM,wEACO,mBAAX8E,GACNA,EAAO,oEAIXnF,KAAKuF,iBAYLnF,QAAQoF,KAAK,2CAXbxF,KAAKuF,iBAAmBF,UAAUC,YAAYG,eAAeC,IACzD1F,KAAKmB,QAAQ5B,EAAW6B,OAAOxB,gBAC3BI,KAAKoE,uBAAuBsB,EAAKC,OAAOC,SAAUF,EAAKC,OAAOE,UAAW7F,KAAKQ,WAElFiB,IACArB,QAAQC,MAAM,uCAAwCoB,GACjC,mBAAX0D,GACNA,EAAO,uCAAwC1D,MAQ/DjC,oBACOQ,KAAKuF,kBACJF,UAAUC,YAAYQ,WAAW9F,KAAKuF,kBACtCvF,KAAKuF,sBAAmBzF,EACxBE,KAAKmB,QAAQ5B,EAAW6B,OAAOvB,gBAE/BO,QAAQoF,KAAK,oDAMrBhG,GAAK,CAACuG,EAAWC,KACVhG,KAAK6B,QAAQkE,IACZ/F,KAAK6B,QAAQkE,GAAWvB,KAAKwB,IAIrCxG,IAAM,CAACuG,EAAWC,KACXhG,KAAK6B,QAAQkE,KACZ/F,KAAK6B,QAAQkE,GAAWvB,KAAKwB,GAC7BhG,KAAKiG,YAAYzB,KAAKwB,KAI9BxG,IAAM,CAACuG,EAAWC,KACXhG,KAAK6B,QAAQkE,KAA6D,IAA9C/F,KAAK6B,QAAQkE,GAAWG,QAAQF,IAC3DhG,KAAK6B,QAAQkE,GAAWd,OAAOjF,KAAK6B,QAAQkE,GAAWG,QAAQF,GAAU,IAEnC,IAAvChG,KAAKiG,YAAYC,QAAQF,IACxBhG,KAAKiG,YAAYhB,OAAOjF,KAAKiG,YAAYC,QAAQF,GAAU,IAInExG,QAAU,CAACuG,EAAW7E,KACflB,KAAK6B,QAAQkE,IACZ/F,KAAK6B,QAAQkE,GAAWnF,SAAQ,CAACuF,EAAUnB,KACvCmB,EAASjF,IACkC,IAAxClB,KAAKiG,YAAYC,QAAQC,KACxBnG,KAAK6B,QAAQkE,GAAWd,OAAOD,EAAQ,GACvChF,KAAKiG,YAAYhB,OAAOjF,KAAKiG,YAAYC,QAAQC,GAAW"}